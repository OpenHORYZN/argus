// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:uuid/uuid.dart';
part 'mission.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`, `from`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CoreConnection>>
abstract class CoreConnection implements RustOpaqueInterface {
  Future<Stream<FlutterControlResponse>> getControl();

  Future<Stream<bool>> getOnline();

  Future<Stream<PositionTriple>> getPos();

  Future<Stream<int>> getStep();

  Future<Stream<double>> getYaw();

  static Future<CoreConnection> init({required String machine}) =>
      RustLib.instance.api.crateApiMissionCoreConnectionInit(machine: machine);

  Future<void> sendControl({required FlutterControlRequest req});

  Future<void> sendMissionPlan({required FlutterMissionPlan plan});
}

@freezed
sealed class FlutterControlRequest with _$FlutterControlRequest {
  const FlutterControlRequest._();

  const factory FlutterControlRequest.fetchMissionPlan() =
      FlutterControlRequest_FetchMissionPlan;
  const factory FlutterControlRequest.pauseResume(
    bool field0,
  ) = FlutterControlRequest_PauseResume;
}

@freezed
sealed class FlutterControlResponse with _$FlutterControlResponse {
  const FlutterControlResponse._();

  const factory FlutterControlResponse.sendMissionPlan(
    FlutterMissionPlan field0,
  ) = FlutterControlResponse_SendMissionPlan;
  const factory FlutterControlResponse.pauseResume(
    bool field0,
  ) = FlutterControlResponse_PauseResume;

  static Future<FlutterControlResponse> default_() =>
      RustLib.instance.api.crateApiMissionFlutterControlResponseDefault();
}

@freezed
sealed class FlutterMissionItem with _$FlutterMissionItem {
  const FlutterMissionItem._();

  const factory FlutterMissionItem.init() = FlutterMissionItem_Init;
  const factory FlutterMissionItem.takeoff({
    required double altitude,
  }) = FlutterMissionItem_Takeoff;
  const factory FlutterMissionItem.waypoint(
    FlutterWaypoint field0,
  ) = FlutterMissionItem_Waypoint;
  const factory FlutterMissionItem.delay(
    double field0,
  ) = FlutterMissionItem_Delay;
  const factory FlutterMissionItem.findSafeSpot() =
      FlutterMissionItem_FindSafeSpot;
  const factory FlutterMissionItem.transition() = FlutterMissionItem_Transition;
  const factory FlutterMissionItem.land() = FlutterMissionItem_Land;
  const factory FlutterMissionItem.precLand() = FlutterMissionItem_PrecLand;
  const factory FlutterMissionItem.end() = FlutterMissionItem_End;
}

class FlutterMissionNode {
  final UuidValue id;
  final FlutterMissionItem item;

  const FlutterMissionNode({
    required this.id,
    required this.item,
  });

  static FlutterMissionNode random({required FlutterMissionItem item}) =>
      RustLib.instance.api.crateApiMissionFlutterMissionNodeRandom(item: item);

  @override
  int get hashCode => id.hashCode ^ item.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FlutterMissionNode &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          item == other.item;
}

class FlutterMissionParams {
  final FlutterVector3 targetVelocity;
  final FlutterVector3 targetAcceleration;
  final FlutterVector3 targetJerk;
  final bool disableYaw;

  const FlutterMissionParams({
    required this.targetVelocity,
    required this.targetAcceleration,
    required this.targetJerk,
    required this.disableYaw,
  });

  FlutterMissionParams copy() =>
      RustLib.instance.api.crateApiMissionFlutterMissionParamsCopy(
        that: this,
      );

  @override
  int get hashCode =>
      targetVelocity.hashCode ^
      targetAcceleration.hashCode ^
      targetJerk.hashCode ^
      disableYaw.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FlutterMissionParams &&
          runtimeType == other.runtimeType &&
          targetVelocity == other.targetVelocity &&
          targetAcceleration == other.targetAcceleration &&
          targetJerk == other.targetJerk &&
          disableYaw == other.disableYaw;
}

class FlutterMissionPlan {
  final UuidValue id;
  final List<FlutterMissionNode> nodes;
  final FlutterMissionParams params;

  const FlutterMissionPlan({
    required this.id,
    required this.nodes,
    required this.params,
  });

  @override
  int get hashCode => id.hashCode ^ nodes.hashCode ^ params.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FlutterMissionPlan &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          nodes == other.nodes &&
          params == other.params;
}

class FlutterVector3 {
  final double x;
  final double y;
  final double z;

  const FlutterVector3({
    required this.x,
    required this.y,
    required this.z,
  });

  @override
  int get hashCode => x.hashCode ^ y.hashCode ^ z.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FlutterVector3 &&
          runtimeType == other.runtimeType &&
          x == other.x &&
          y == other.y &&
          z == other.z;
}

@freezed
sealed class FlutterWaypoint with _$FlutterWaypoint {
  const FlutterWaypoint._();

  const factory FlutterWaypoint.localOffset(
    double field0,
    double field1,
    double field2,
  ) = FlutterWaypoint_LocalOffset;
  const factory FlutterWaypoint.globalFixedHeight({
    required double lat,
    required double lon,
    required double alt,
  }) = FlutterWaypoint_GlobalFixedHeight;
  const factory FlutterWaypoint.globalRelativeHeight({
    required double lat,
    required double lon,
    required double heightDiff,
  }) = FlutterWaypoint_GlobalRelativeHeight;
}

class PositionTriple {
  final double x;
  final double y;
  final double z;

  const PositionTriple({
    required this.x,
    required this.y,
    required this.z,
  });

  static Future<PositionTriple> default_() =>
      RustLib.instance.api.crateApiMissionPositionTripleDefault();

  @override
  int get hashCode => x.hashCode ^ y.hashCode ^ z.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PositionTriple &&
          runtimeType == other.runtimeType &&
          x == other.x &&
          y == other.y &&
          z == other.z;
}
