// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.3.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/mission.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiMissionInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.3.0';

  @override
  int get rustContentHash => -1986960674;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_argus',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<Stream<FlutterControlResponse>>
      crateApiMissionCoreConnectionGetControl({required CoreConnection that});

  Future<Stream<bool>> crateApiMissionCoreConnectionGetOnline(
      {required CoreConnection that});

  Future<Stream<PositionTriple>> crateApiMissionCoreConnectionGetPos(
      {required CoreConnection that});

  Future<Stream<int>> crateApiMissionCoreConnectionGetStep(
      {required CoreConnection that});

  Future<Stream<double>> crateApiMissionCoreConnectionGetYaw(
      {required CoreConnection that});

  Future<CoreConnection> crateApiMissionCoreConnectionInit(
      {required String machine});

  Future<void> crateApiMissionCoreConnectionSendControl(
      {required CoreConnection that, required FlutterControlRequest req});

  Future<void> crateApiMissionCoreConnectionSendMissionPlan(
      {required CoreConnection that, required FlutterMissionPlan plan});

  Future<FlutterControlResponse> crateApiMissionFlutterControlResponseDefault();

  FlutterMissionNode crateApiMissionFlutterMissionNodeRandom(
      {required FlutterMissionItem item});

  FlutterMissionParams crateApiMissionFlutterMissionParamsCopy(
      {required FlutterMissionParams that});

  Future<void> crateApiMissionInitApp();

  Future<PositionTriple> crateApiMissionPositionTripleDefault();

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CoreConnection;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CoreConnection;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_CoreConnectionPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<Stream<FlutterControlResponse>>
      crateApiMissionCoreConnectionGetControl(
          {required CoreConnection that}) async {
    final sink = RustStreamSink<FlutterControlResponse>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection(
            that, serializer);
        sse_encode_StreamSink_flutter_control_response_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMissionCoreConnectionGetControlConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMissionCoreConnectionGetControlConstMeta =>
      const TaskConstMeta(
        debugName: "CoreConnection_get_control",
        argNames: ["that", "sink"],
      );

  @override
  Future<Stream<bool>> crateApiMissionCoreConnectionGetOnline(
      {required CoreConnection that}) async {
    final sink = RustStreamSink<bool>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection(
            that, serializer);
        sse_encode_StreamSink_bool_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMissionCoreConnectionGetOnlineConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMissionCoreConnectionGetOnlineConstMeta =>
      const TaskConstMeta(
        debugName: "CoreConnection_get_online",
        argNames: ["that", "sink"],
      );

  @override
  Future<Stream<PositionTriple>> crateApiMissionCoreConnectionGetPos(
      {required CoreConnection that}) async {
    final sink = RustStreamSink<PositionTriple>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection(
            that, serializer);
        sse_encode_StreamSink_position_triple_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMissionCoreConnectionGetPosConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMissionCoreConnectionGetPosConstMeta =>
      const TaskConstMeta(
        debugName: "CoreConnection_get_pos",
        argNames: ["that", "sink"],
      );

  @override
  Future<Stream<int>> crateApiMissionCoreConnectionGetStep(
      {required CoreConnection that}) async {
    final sink = RustStreamSink<int>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection(
            that, serializer);
        sse_encode_StreamSink_i_32_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMissionCoreConnectionGetStepConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMissionCoreConnectionGetStepConstMeta =>
      const TaskConstMeta(
        debugName: "CoreConnection_get_step",
        argNames: ["that", "sink"],
      );

  @override
  Future<Stream<double>> crateApiMissionCoreConnectionGetYaw(
      {required CoreConnection that}) async {
    final sink = RustStreamSink<double>();
    await handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection(
            that, serializer);
        sse_encode_StreamSink_f_64_Sse(sink, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMissionCoreConnectionGetYawConstMeta,
      argValues: [that, sink],
      apiImpl: this,
    ));
    return sink.stream;
  }

  TaskConstMeta get kCrateApiMissionCoreConnectionGetYawConstMeta =>
      const TaskConstMeta(
        debugName: "CoreConnection_get_yaw",
        argNames: ["that", "sink"],
      );

  @override
  Future<CoreConnection> crateApiMissionCoreConnectionInit(
      {required String machine}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(machine, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMissionCoreConnectionInitConstMeta,
      argValues: [machine],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMissionCoreConnectionInitConstMeta =>
      const TaskConstMeta(
        debugName: "CoreConnection_init",
        argNames: ["machine"],
      );

  @override
  Future<void> crateApiMissionCoreConnectionSendControl(
      {required CoreConnection that, required FlutterControlRequest req}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection(
            that, serializer);
        sse_encode_box_autoadd_flutter_control_request(req, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMissionCoreConnectionSendControlConstMeta,
      argValues: [that, req],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMissionCoreConnectionSendControlConstMeta =>
      const TaskConstMeta(
        debugName: "CoreConnection_send_control",
        argNames: ["that", "req"],
      );

  @override
  Future<void> crateApiMissionCoreConnectionSendMissionPlan(
      {required CoreConnection that, required FlutterMissionPlan plan}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection(
            that, serializer);
        sse_encode_box_autoadd_flutter_mission_plan(plan, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiMissionCoreConnectionSendMissionPlanConstMeta,
      argValues: [that, plan],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMissionCoreConnectionSendMissionPlanConstMeta =>
      const TaskConstMeta(
        debugName: "CoreConnection_send_mission_plan",
        argNames: ["that", "plan"],
      );

  @override
  Future<FlutterControlResponse>
      crateApiMissionFlutterControlResponseDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_flutter_control_response,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMissionFlutterControlResponseDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMissionFlutterControlResponseDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "flutter_control_response_default",
        argNames: [],
      );

  @override
  FlutterMissionNode crateApiMissionFlutterMissionNodeRandom(
      {required FlutterMissionItem item}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_flutter_mission_item(item, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_flutter_mission_node,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMissionFlutterMissionNodeRandomConstMeta,
      argValues: [item],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMissionFlutterMissionNodeRandomConstMeta =>
      const TaskConstMeta(
        debugName: "flutter_mission_node_random",
        argNames: ["item"],
      );

  @override
  FlutterMissionParams crateApiMissionFlutterMissionParamsCopy(
      {required FlutterMissionParams that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_flutter_mission_params(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_flutter_mission_params,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMissionFlutterMissionParamsCopyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMissionFlutterMissionParamsCopyConstMeta =>
      const TaskConstMeta(
        debugName: "flutter_mission_params_copy",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiMissionInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMissionInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMissionInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<PositionTriple> crateApiMissionPositionTripleDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_position_triple,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiMissionPositionTripleDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMissionPositionTripleDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "position_triple_default",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_CoreConnection => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_CoreConnection => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  CoreConnection
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CoreConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CoreConnection
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CoreConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CoreConnection
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CoreConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CoreConnection
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CoreConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<bool> dco_decode_StreamSink_bool_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<double> dco_decode_StreamSink_f_64_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<FlutterControlResponse>
      dco_decode_StreamSink_flutter_control_response_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<int> dco_decode_StreamSink_i_32_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<PositionTriple> dco_decode_StreamSink_position_triple_Sse(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  UuidValue dco_decode_Uuid(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UuidValue.fromByteList(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  FlutterControlRequest dco_decode_box_autoadd_flutter_control_request(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_flutter_control_request(raw);
  }

  @protected
  FlutterMissionItem dco_decode_box_autoadd_flutter_mission_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_flutter_mission_item(raw);
  }

  @protected
  FlutterMissionParams dco_decode_box_autoadd_flutter_mission_params(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_flutter_mission_params(raw);
  }

  @protected
  FlutterMissionPlan dco_decode_box_autoadd_flutter_mission_plan(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_flutter_mission_plan(raw);
  }

  @protected
  FlutterWaypoint dco_decode_box_autoadd_flutter_waypoint(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_flutter_waypoint(raw);
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FlutterControlRequest dco_decode_flutter_control_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return FlutterControlRequest_FetchMissionPlan();
      case 1:
        return FlutterControlRequest_PauseResume(
          dco_decode_bool(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  FlutterControlResponse dco_decode_flutter_control_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return FlutterControlResponse_SendMissionPlan(
          dco_decode_box_autoadd_flutter_mission_plan(raw[1]),
        );
      case 1:
        return FlutterControlResponse_PauseResume(
          dco_decode_bool(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  FlutterMissionItem dco_decode_flutter_mission_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return FlutterMissionItem_Init();
      case 1:
        return FlutterMissionItem_Takeoff(
          altitude: dco_decode_f_64(raw[1]),
        );
      case 2:
        return FlutterMissionItem_Waypoint(
          dco_decode_box_autoadd_flutter_waypoint(raw[1]),
        );
      case 3:
        return FlutterMissionItem_Delay(
          dco_decode_f_64(raw[1]),
        );
      case 4:
        return FlutterMissionItem_FindSafeSpot();
      case 5:
        return FlutterMissionItem_Transition();
      case 6:
        return FlutterMissionItem_Land();
      case 7:
        return FlutterMissionItem_PrecLand();
      case 8:
        return FlutterMissionItem_End();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  FlutterMissionNode dco_decode_flutter_mission_node(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FlutterMissionNode(
      id: dco_decode_Uuid(arr[0]),
      item: dco_decode_flutter_mission_item(arr[1]),
    );
  }

  @protected
  FlutterMissionParams dco_decode_flutter_mission_params(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return FlutterMissionParams(
      targetVelocity: dco_decode_flutter_vector_3(arr[0]),
      targetAcceleration: dco_decode_flutter_vector_3(arr[1]),
      targetJerk: dco_decode_flutter_vector_3(arr[2]),
      disableYaw: dco_decode_bool(arr[3]),
    );
  }

  @protected
  FlutterMissionPlan dco_decode_flutter_mission_plan(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return FlutterMissionPlan(
      id: dco_decode_Uuid(arr[0]),
      nodes: dco_decode_list_flutter_mission_node(arr[1]),
      params: dco_decode_flutter_mission_params(arr[2]),
    );
  }

  @protected
  FlutterVector3 dco_decode_flutter_vector_3(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return FlutterVector3(
      x: dco_decode_f_64(arr[0]),
      y: dco_decode_f_64(arr[1]),
      z: dco_decode_f_64(arr[2]),
    );
  }

  @protected
  FlutterWaypoint dco_decode_flutter_waypoint(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return FlutterWaypoint_LocalOffset(
          dco_decode_f_64(raw[1]),
          dco_decode_f_64(raw[2]),
          dco_decode_f_64(raw[3]),
        );
      case 1:
        return FlutterWaypoint_GlobalFixedHeight(
          lat: dco_decode_f_64(raw[1]),
          lon: dco_decode_f_64(raw[2]),
          alt: dco_decode_f_64(raw[3]),
        );
      case 2:
        return FlutterWaypoint_GlobalRelativeHeight(
          lat: dco_decode_f_64(raw[1]),
          lon: dco_decode_f_64(raw[2]),
          heightDiff: dco_decode_f_64(raw[3]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<FlutterMissionNode> dco_decode_list_flutter_mission_node(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_flutter_mission_node).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  PositionTriple dco_decode_position_triple(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return PositionTriple(
      x: dco_decode_f_64(arr[0]),
      y: dco_decode_f_64(arr[1]),
      z: dco_decode_f_64(arr[2]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  CoreConnection
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CoreConnectionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CoreConnection
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CoreConnectionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CoreConnection
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CoreConnectionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  CoreConnection
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CoreConnectionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<bool> sse_decode_StreamSink_bool_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<double> sse_decode_StreamSink_f_64_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<FlutterControlResponse>
      sse_decode_StreamSink_flutter_control_response_Sse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<int> sse_decode_StreamSink_i_32_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<PositionTriple> sse_decode_StreamSink_position_triple_Sse(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  UuidValue sse_decode_Uuid(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return UuidValue.fromByteList(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  FlutterControlRequest sse_decode_box_autoadd_flutter_control_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_flutter_control_request(deserializer));
  }

  @protected
  FlutterMissionItem sse_decode_box_autoadd_flutter_mission_item(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_flutter_mission_item(deserializer));
  }

  @protected
  FlutterMissionParams sse_decode_box_autoadd_flutter_mission_params(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_flutter_mission_params(deserializer));
  }

  @protected
  FlutterMissionPlan sse_decode_box_autoadd_flutter_mission_plan(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_flutter_mission_plan(deserializer));
  }

  @protected
  FlutterWaypoint sse_decode_box_autoadd_flutter_waypoint(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_flutter_waypoint(deserializer));
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  FlutterControlRequest sse_decode_flutter_control_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return FlutterControlRequest_FetchMissionPlan();
      case 1:
        var var_field0 = sse_decode_bool(deserializer);
        return FlutterControlRequest_PauseResume(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  FlutterControlResponse sse_decode_flutter_control_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_box_autoadd_flutter_mission_plan(deserializer);
        return FlutterControlResponse_SendMissionPlan(var_field0);
      case 1:
        var var_field0 = sse_decode_bool(deserializer);
        return FlutterControlResponse_PauseResume(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  FlutterMissionItem sse_decode_flutter_mission_item(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return FlutterMissionItem_Init();
      case 1:
        var var_altitude = sse_decode_f_64(deserializer);
        return FlutterMissionItem_Takeoff(altitude: var_altitude);
      case 2:
        var var_field0 = sse_decode_box_autoadd_flutter_waypoint(deserializer);
        return FlutterMissionItem_Waypoint(var_field0);
      case 3:
        var var_field0 = sse_decode_f_64(deserializer);
        return FlutterMissionItem_Delay(var_field0);
      case 4:
        return FlutterMissionItem_FindSafeSpot();
      case 5:
        return FlutterMissionItem_Transition();
      case 6:
        return FlutterMissionItem_Land();
      case 7:
        return FlutterMissionItem_PrecLand();
      case 8:
        return FlutterMissionItem_End();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  FlutterMissionNode sse_decode_flutter_mission_node(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_item = sse_decode_flutter_mission_item(deserializer);
    return FlutterMissionNode(id: var_id, item: var_item);
  }

  @protected
  FlutterMissionParams sse_decode_flutter_mission_params(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_targetVelocity = sse_decode_flutter_vector_3(deserializer);
    var var_targetAcceleration = sse_decode_flutter_vector_3(deserializer);
    var var_targetJerk = sse_decode_flutter_vector_3(deserializer);
    var var_disableYaw = sse_decode_bool(deserializer);
    return FlutterMissionParams(
        targetVelocity: var_targetVelocity,
        targetAcceleration: var_targetAcceleration,
        targetJerk: var_targetJerk,
        disableYaw: var_disableYaw);
  }

  @protected
  FlutterMissionPlan sse_decode_flutter_mission_plan(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_Uuid(deserializer);
    var var_nodes = sse_decode_list_flutter_mission_node(deserializer);
    var var_params = sse_decode_flutter_mission_params(deserializer);
    return FlutterMissionPlan(id: var_id, nodes: var_nodes, params: var_params);
  }

  @protected
  FlutterVector3 sse_decode_flutter_vector_3(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_f_64(deserializer);
    var var_y = sse_decode_f_64(deserializer);
    var var_z = sse_decode_f_64(deserializer);
    return FlutterVector3(x: var_x, y: var_y, z: var_z);
  }

  @protected
  FlutterWaypoint sse_decode_flutter_waypoint(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_f_64(deserializer);
        var var_field1 = sse_decode_f_64(deserializer);
        var var_field2 = sse_decode_f_64(deserializer);
        return FlutterWaypoint_LocalOffset(var_field0, var_field1, var_field2);
      case 1:
        var var_lat = sse_decode_f_64(deserializer);
        var var_lon = sse_decode_f_64(deserializer);
        var var_alt = sse_decode_f_64(deserializer);
        return FlutterWaypoint_GlobalFixedHeight(
            lat: var_lat, lon: var_lon, alt: var_alt);
      case 2:
        var var_lat = sse_decode_f_64(deserializer);
        var var_lon = sse_decode_f_64(deserializer);
        var var_heightDiff = sse_decode_f_64(deserializer);
        return FlutterWaypoint_GlobalRelativeHeight(
            lat: var_lat, lon: var_lon, heightDiff: var_heightDiff);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<FlutterMissionNode> sse_decode_list_flutter_mission_node(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FlutterMissionNode>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_flutter_mission_node(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  PositionTriple sse_decode_position_triple(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_x = sse_decode_f_64(deserializer);
    var var_y = sse_decode_f_64(deserializer);
    var var_z = sse_decode_f_64(deserializer);
    return PositionTriple(x: var_x, y: var_y, z: var_z);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection(
          CoreConnection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CoreConnectionImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection(
          CoreConnection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CoreConnectionImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection(
          CoreConnection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CoreConnectionImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCoreConnection(
          CoreConnection self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as CoreConnectionImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_bool_Sse(
      RustStreamSink<bool> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_f_64_Sse(
      RustStreamSink<double> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_f_64,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_flutter_control_response_Sse(
      RustStreamSink<FlutterControlResponse> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_flutter_control_response,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_i_32_Sse(
      RustStreamSink<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_i_32,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_StreamSink_position_triple_Sse(
      RustStreamSink<PositionTriple> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
        self.setupAndSerialize(
            codec: SseCodec(
          decodeSuccessData: sse_decode_position_triple,
          decodeErrorData: sse_decode_AnyhowException,
        )),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_Uuid(UuidValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.toBytes(), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_flutter_control_request(
      FlutterControlRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_flutter_control_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_flutter_mission_item(
      FlutterMissionItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_flutter_mission_item(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_flutter_mission_params(
      FlutterMissionParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_flutter_mission_params(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_flutter_mission_plan(
      FlutterMissionPlan self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_flutter_mission_plan(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_flutter_waypoint(
      FlutterWaypoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_flutter_waypoint(self, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_flutter_control_request(
      FlutterControlRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case FlutterControlRequest_FetchMissionPlan():
        sse_encode_i_32(0, serializer);
      case FlutterControlRequest_PauseResume(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_bool(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_flutter_control_response(
      FlutterControlResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case FlutterControlResponse_SendMissionPlan(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_flutter_mission_plan(field0, serializer);
      case FlutterControlResponse_PauseResume(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_bool(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_flutter_mission_item(
      FlutterMissionItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case FlutterMissionItem_Init():
        sse_encode_i_32(0, serializer);
      case FlutterMissionItem_Takeoff(altitude: final altitude):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(altitude, serializer);
      case FlutterMissionItem_Waypoint(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_flutter_waypoint(field0, serializer);
      case FlutterMissionItem_Delay(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_f_64(field0, serializer);
      case FlutterMissionItem_FindSafeSpot():
        sse_encode_i_32(4, serializer);
      case FlutterMissionItem_Transition():
        sse_encode_i_32(5, serializer);
      case FlutterMissionItem_Land():
        sse_encode_i_32(6, serializer);
      case FlutterMissionItem_PrecLand():
        sse_encode_i_32(7, serializer);
      case FlutterMissionItem_End():
        sse_encode_i_32(8, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_flutter_mission_node(
      FlutterMissionNode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_flutter_mission_item(self.item, serializer);
  }

  @protected
  void sse_encode_flutter_mission_params(
      FlutterMissionParams self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_flutter_vector_3(self.targetVelocity, serializer);
    sse_encode_flutter_vector_3(self.targetAcceleration, serializer);
    sse_encode_flutter_vector_3(self.targetJerk, serializer);
    sse_encode_bool(self.disableYaw, serializer);
  }

  @protected
  void sse_encode_flutter_mission_plan(
      FlutterMissionPlan self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Uuid(self.id, serializer);
    sse_encode_list_flutter_mission_node(self.nodes, serializer);
    sse_encode_flutter_mission_params(self.params, serializer);
  }

  @protected
  void sse_encode_flutter_vector_3(
      FlutterVector3 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.x, serializer);
    sse_encode_f_64(self.y, serializer);
    sse_encode_f_64(self.z, serializer);
  }

  @protected
  void sse_encode_flutter_waypoint(
      FlutterWaypoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case FlutterWaypoint_LocalOffset(
          field0: final field0,
          field1: final field1,
          field2: final field2
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_f_64(field0, serializer);
        sse_encode_f_64(field1, serializer);
        sse_encode_f_64(field2, serializer);
      case FlutterWaypoint_GlobalFixedHeight(
          lat: final lat,
          lon: final lon,
          alt: final alt
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(lat, serializer);
        sse_encode_f_64(lon, serializer);
        sse_encode_f_64(alt, serializer);
      case FlutterWaypoint_GlobalRelativeHeight(
          lat: final lat,
          lon: final lon,
          heightDiff: final heightDiff
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_f_64(lat, serializer);
        sse_encode_f_64(lon, serializer);
        sse_encode_f_64(heightDiff, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_flutter_mission_node(
      List<FlutterMissionNode> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_flutter_mission_node(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_position_triple(
      PositionTriple self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.x, serializer);
    sse_encode_f_64(self.y, serializer);
    sse_encode_f_64(self.z, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class CoreConnectionImpl extends RustOpaque implements CoreConnection {
  // Not to be used by end users
  CoreConnectionImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CoreConnectionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_CoreConnection,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_CoreConnection,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_CoreConnectionPtr,
  );

  Future<Stream<FlutterControlResponse>> getControl() =>
      RustLib.instance.api.crateApiMissionCoreConnectionGetControl(
        that: this,
      );

  Future<Stream<bool>> getOnline() =>
      RustLib.instance.api.crateApiMissionCoreConnectionGetOnline(
        that: this,
      );

  Future<Stream<PositionTriple>> getPos() =>
      RustLib.instance.api.crateApiMissionCoreConnectionGetPos(
        that: this,
      );

  Future<Stream<int>> getStep() =>
      RustLib.instance.api.crateApiMissionCoreConnectionGetStep(
        that: this,
      );

  Future<Stream<double>> getYaw() =>
      RustLib.instance.api.crateApiMissionCoreConnectionGetYaw(
        that: this,
      );

  Future<void> sendControl({required FlutterControlRequest req}) =>
      RustLib.instance.api
          .crateApiMissionCoreConnectionSendControl(that: this, req: req);

  Future<void> sendMissionPlan({required FlutterMissionPlan plan}) =>
      RustLib.instance.api
          .crateApiMissionCoreConnectionSendMissionPlan(that: this, plan: plan);
}
